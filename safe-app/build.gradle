import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
        classpath 'de.undercouch:gradle-download-task:3.2.0'
    }
}
plugins {
    id "com.github.spotbugs" version "1.6.5"
    id "com.lazan.javaflavours" version "1.2"
}
javaFlavours {
  flavour 'mock'
  flavour 'nonMock'
}
sourceSets {
  test {
    java {
      srcDir('src/mock/java')
    }
    resources {
      srcDir('src/mock/resources')
    }
  }
}

apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: "com.github.johnrengelman.shadow"

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    spotbugsTest.enabled = false
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
pmd {
    pmdTest.enabled = false
}
jacoco {
  toolVersion = "0.8.1"
}
jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.destination file("${buildDir}/jacocoHtml")
  }
  additionalSourceDirs = files("${rootDir}/api/src/main/java")
  additionalClassDirs = files("${rootDir}/api/build/classes/java/main")
}

group 'net.maidsafe'
version '0.1.0'

dependencies {
    implementation project(':lib')
    implementation project(':api')
    testImplementation 'junit:junit:4.12'
}
tasks.withType(Jar) {
  from project(':api').sourceSets.main.output
  from project(':lib').sourceSets.main.output
}
repositories {
    mavenCentral()
}

def nativeLibsVersion = "0.9.0"
def tempDownloadDir = "${projectDir}/.tempDownloads"

static def getCombinations() {
  def packages = [ 'safe_app', 'safe_app_jni', 'safe_authenticator', 'safe_authenticator_jni' ]
  def platforms = ['osx', 'linux', 'win']
  def variants = [ 'mock', 'nonMock' ]
  def architectures = ['x64']
  [packages, platforms, variants, architectures].combinations().findAll { it ->
    !(it[0].contains('safe_authenticator') && it[2] == 'nonMock')
  }
}

test {
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpDir = file("$buildDir/jacoco/classpathdumps")
  }
  testLogging {
    events "PASSED", "FAILED", "SKIPPED"
    exceptionFormat "full"
  }
}

task("downloadNativeLibs", type: Download) {
    File dir = new File(tempDownloadDir)
    if (dir.exists()) {
        assert dir.deleteDir()
    }
    def endPoints = getCombinations().collect {
        "https://github.com/lionel1704/safe_client_libs/releases/download/${nativeLibsVersion}/${it[0]}-${it[2] == 'mock' ? 'mock-' : ''}v${nativeLibsVersion}-${it[1]}-${it[3]}.zip"
    }
    src(endPoints)
    dest tempDownloadDir
}
tasks.addRule('Pattern: unzip-<ID>') { String taskName ->
    if (taskName.startsWith('unzip')) {
        task(taskName, type: Copy) {
            def args = name.split('-')
            from zipTree("${tempDownloadDir}/${args[1]}-${args[3] == 'mock' ? 'mock-' : ''}v${nativeLibsVersion}-${args[2]}-${args[4]}.zip")
            into "${projectDir}/src/${args[3]}/resources/native"
        }
    }
}

task("download-nativelibs") {
    dependsOn << ['downloadNativeLibs', getCombinations().collect {
        "unzip-${it[0]}-${it[1]}-${it[2]}-${it[3]}"
    }]
}