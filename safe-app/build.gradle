import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import de.undercouch.gradle.tasks.download.Download;
apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: "com.github.johnrengelman.shadow"
group 'net.maidsafe'
version '0.1.0'
dependencies {
    implementation project(':api')
    testImplementation 'junit:junit:4.12'
}
repositories {
    mavenCentral()
}
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
        classpath 'de.undercouch:gradle-download-task:3.2.0'
    }


}
def nativeLibsVersion = "0dacb37"
def tempDownloadDir =  "${projectDir}/.tempDownloads"
def getCombinations() {
    def platforms = ['linux', 'win', 'osx']
    def variants = ['mock', 'non-mock']
    def architectures = ['x86', 'x64']
    [platforms, architectures, variants].combinations().findAll { !(it[0] == 'osx' && it[1] == 'x86') }
}
tasks.addRule('Pattern: NativeLibs-<ID>') { String taskName ->
    if (taskName.startsWith('NativeLibs-')) {
        task(taskName, type: Copy) {
            def args = name.split('-')
            String platform = args[1]
            String arch = args[2]
            dependsOn "${name.replace('NativeLibs', 'delete')}"
            from "${projectDir}/libs/${platform}/${args[3] == 'mock'? 'mock' : 'non-mock'}/${arch}/"
            into "${projectDir}/src/main/resources/native"
        }
    }
}
tasks.addRule('Pattern: delete-<ID>') { String taskName ->
    if (taskName.startsWith('delete-')) {
        task(taskName, type: Delete) {
            delete "${projectDir}/src/main/resources/native/"
            delete "${projectDir}/build/resources/main/native/"
        }
    }
}


tasks.addRule('Pattern: pack-<ID>') { String taskName ->
    if (taskName.startsWith('pack')) {
        task(taskName, type: ShadowJar) {
            def args = name.split('-')
            String platform = args[1]
            String arch = args[2]
            boolean isMock = args[3] == "mock"

            dependsOn << ["${name.replace('pack', 'NativeLibs')}","build"]
            from sourceSets.main.output
            from sourceSets.main.resources
            from project(':api').sourceSets.main.output
            from project(':api').sourceSets.main.resources
            baseName = "${project.name}${isMock ? '-mock' : ''}"
            classifier = "${platform}-${arch}"
            version = project.version
            doLast {
                println "Completed packaging ${name}"
            }
        }
    }
}
task ('pack') {
    def tasks = getCombinations().collect {"pack-${it[0]}-${it[1]}-${it[2]}" }
    dependsOn << tasks
    doLast {
        println "Deleting default Jar..."
        File defaultJar = new File("${project.buildDir}/libs/safe-app-${project.version}.jar")
        if (defaultJar.exists()) {
            defaultJar.delete()
        }
    }
}
task ("download", type: Download) {
    File dir = new File(tempDownloadDir)
    if (dir.exists()) {
        assert dir.deleteDir()
    }
    def endPoints = getCombinations().collect {
        "https://s3.eu-west-2.amazonaws.com/safe-client-libs/safe_app-${it[2] == 'mock' ? 'mock-' : ''}${nativeLibsVersion}-${it[0]}-${it[1]}.zip"
    }
    src(endPoints)
    dest tempDownloadDir
}
tasks.addRule('Pattern: unzip-<ID>') { String taskName ->
    if (taskName.startsWith('unzip')) {
        task(taskName, type: Copy) {
            def args = name.split('-')
            String platform = args[1]
            String arch = args[2]
            boolean isMock = args[3] == "mock"
            from zipTree("${tempDownloadDir}/safe_app-${isMock ? 'mock-' : ''}${nativeLibsVersion}-${platform}-${arch}.zip")
            into "${projectDir}/libs/${platform}/${isMock ? 'mock' : 'non-mock'}/${arch}"
        }
    }
}
task ("download-libs") {
    dependsOn << [
            'download',
            getCombinations().collect { "unzip-${it[0]}-${it[1]}-${it[2]}" }
    ]
}