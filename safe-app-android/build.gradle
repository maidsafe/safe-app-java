import de.undercouch.gradle.tasks.download.Download

apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 1
        versionName "0.1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
        }
    }
    flavorDimensions "app"
    productFlavors {
        mock {
            dimension "app"
        }
        'non-mock' {
            dimension "app"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '26.0.2'
}

android.libraryVariants.all { variant ->
    variant.outputs.all { it ->
        outputFileName = "safe-app-${it.baseName}-${android.defaultConfig.versionName}.aar"
    }
}

buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {

        classpath 'com.android.tools.build:gradle:3.0.1'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath 'de.undercouch:gradle-download-task:3.2.0'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation project(':api')
    implementation project(':lib')
    compile project(':safe-authenticator')
}

def nativeLibsVersion = "mobile-test"
def tempLibDir =  "${projectDir}/.temp_downloads"

task ("downloadNativeLibs", type: Download) {
    File dir = new File(tempLibDir)
    if (!dir.exists()) {
        dir.mkdir()
    }
//    def endPoints = "https://s3.eu-west-2.amazonaws.com/safe-mobile/${nativeLibsVersion}.zip"
    def endPoints = "https://github.com/lionel1704/safe_client_libs/releases/download/${nativeLibsVersion}/${nativeLibsVersion}.zip"
    src(endPoints)
    dest tempLibDir
}

task ("unzipNativeLibs", type: Copy) {
    dependsOn << ['downloadNativeLibs']
    from zipTree("${tempLibDir}/${nativeLibsVersion}.zip")
    into tempLibDir
    doLast {
        copy{
            from tempLibDir+"/android/lib/mock/"
            into "${projectDir}/src/mock/jniLibs"
        }
        copy{
            from tempLibDir+"/android/lib/non-mock/"
            into "${projectDir}/src/non-mock/jniLibs"
        }
    }
}

task ("download-nativelibs", type: Delete) {
    dependsOn << ['unzipNativeLibs']
    delete tempLibDir
}
